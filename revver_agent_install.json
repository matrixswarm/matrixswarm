{
  "type": "mediator_install_request",
  "source_type": "wire_json",
  "source_value": {
    "revver_agent": {
      "version": "0.1",
      "revision": "24",
      "source": "import os\nimport json\nimport time\nimport socket\nimport ssl\nimport threading\nimport redis\nfrom datetime import datetime\n\nMESSAGE_QUEUE_PATH = \"/sites/orbit/python/message_queue.json\"\nREDIS_KEY = \"mediator:agents\"\nTLS_PORT = 65431\nAGENT_NAME = \"matrix_agent\"\nVERSION = 1\nREVISION = 2\nHEALTH_CHECK_INTERVAL = 15\n\nclass MatrixAgent:\n    def __init__(self):\n        try:\n            self.redis = redis.Redis(host=\"localhost\", port=6379, decode_responses=True)\n            self.redis.ping()\n            self.redis_available = True\n        except Exception as e:\n            print(f\"[ERROR] Redis unavailable: {e}\")\n            self.redis_available = False\n\n        self.agent_state = {}\n        self.running = True\n        self.start_time = time.time()\n\n        print(f\"[BOOT] {AGENT_NAME} v{VERSION} r{REVISION} online.\")\n\n        if not self.redis_available:\n            self.report_critical(\"Redis unavailable. MatrixAgent is running in degraded mode.\")\n\n        self.run()\n\n    def report_critical(self, message):\n        print(f\"[CRITICAL] {message}\")\n        if os.path.exists(MESSAGE_QUEUE_PATH):\n            with open(MESSAGE_QUEUE_PATH, \"a\") as f:\n                f.write(json.dumps({\n                    \"type\": \"matrix_alert\",\n                    \"severity\": \"critical\",\n                    \"message\": message,\n                    \"agent\": AGENT_NAME,\n                    \"timestamp\": datetime.utcnow().isoformat()\n                }) + \"\\n\")\n\n    def run(self):\n        threading.Thread(target=self.tail_queue, daemon=True).start()\n        threading.Thread(target=self.listen_tls, daemon=True).start()\n        threading.Thread(target=self.health_check_loop, daemon=True).start()\n        self.backfill_agent_state()\n\n    def tail_queue(self):\n        with open(MESSAGE_QUEUE_PATH, \"r\") as f:\n            f.seek(0, os.SEEK_END)  # Move to end of file\n            while self.running:\n                line = f.readline()\n                if not line:\n                    time.sleep(0.5)\n                    continue\n                try:\n                    msg = json.loads(line.strip())\n                    self.process_message(msg)\n                except Exception as e:\n                    print(f\"[Matrix] Failed to process tail line: {e}\")\n\n    def listen_tls(self):\n        context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)\n        context.load_cert_chain(certfile=\"certs/server.crt\", keyfile=\"certs/server.key\")\n\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server:\n            server.bind((\"0.0.0.0\", TLS_PORT))\n            server.listen(5)\n            print(f\"[Matrix] Listening on port {TLS_PORT} (TLS)\")\n\n            while self.running:\n                conn, _ = server.accept()\n                secure_conn = context.wrap_socket(conn, server_side=True)\n                threading.Thread(target=self.handle_tls_client, args=(secure_conn,), daemon=True).start()\n\n    def handle_tls_client(self, conn):\n        with conn:\n            for line in conn.makefile():\n                msg = json.loads(line.strip())\n                self.process_message(msg)\n\n    def process_message(self, msg):\n        msg_type = msg.get(\"type\")\n\n        if msg_type == \"matrix_request\":\n            message = msg.get(\"source_value\", {}).get(\"message\", \"\").lower()\n            if message == \"status\":\n                self.report_status()\n            elif message == \"agent_list\":\n                self.report_agent_list()\n            elif msg_type == \"matrix_reply\":\n                print(f\"[Matrix] Reply received: {msg}\")\n            elif message.startswith(\"restart\"):\n                self.handle_restart_command(message)\n            elif message.startswith(\"kill\"):\n                self.handle_kill_command(message)\n            elif message.startswith(\"freeze\"):\n                self.handle_freeze_command(message)\n            elif message.startswith(\"priority\"):\n                self.handle_priority_command(message)\n            else:\n                print(f\"[Matrix] Unknown matrix request: {message}\")\n        elif msg_type == \"agent_status\":\n            agent_id = msg.get(\"agent_id\")\n            self.agent_state[agent_id] = {\n                \"status\": msg.get(\"status\"),\n                \"last_seen\": msg.get(\"last_seen\"),\n                \"name\": msg.get(\"name\"),\n                \"version\": msg.get(\"version\"),\n                \"revision\": msg.get(\"revision\")\n            }\n        else:\n            print(f\"[Matrix] Unknown message type: {msg_type}\")\n\n    def handle_restart_command(self, message):\n        parts = message.strip().split()\n        if len(parts) != 2:\n            print(\"[Matrix] Invalid restart command format. Use 'restart <uuid>'\")\n            return\n        target_uuid = parts[1]\n        payload = {\n            \"type\": \"mediator_restart_request\",\n            \"agent_uuid\": target_uuid,\n            \"source\": AGENT_NAME,\n            \"timestamp\": datetime.utcnow().isoformat()\n        }\n        print(f\"[Matrix] Sending restart request for {target_uuid}\")\n        self.queue_message(payload)\n\n    def handle_kill_command(self, message):\n        parts = message.strip().split()\n        if len(parts) != 2:\n            print(\"[Matrix] Invalid kill command format. Use 'kill <uuid>'\")\n            return\n        target_uuid = parts[1]\n        payload = {\n            \"type\": \"mediator_kill_request\",\n            \"agent_uuid\": target_uuid,\n            \"source\": AGENT_NAME,\n            \"timestamp\": datetime.utcnow().isoformat()\n        }\n        print(f\"[Matrix] Sending kill request for {target_uuid}\")\n        self.queue_message(payload)\n\n    def handle_freeze_command(self, message):\n        parts = message.strip().split()\n        if len(parts) != 2:\n            print(\"[Matrix] Invalid freeze command format. Use 'freeze <uuid>'\")\n            return\n        target_uuid = parts[1]\n        payload = {\n            \"type\": \"mediator_freeze_request\",\n            \"agent_uuid\": target_uuid,\n            \"source\": AGENT_NAME,\n            \"timestamp\": datetime.utcnow().isoformat()\n        }\n        print(f\"[Matrix] Sending freeze request for {target_uuid}\")\n        self.queue_message(payload)\n\n    def handle_priority_command(self, message):\n        parts = message.strip().split()\n        if len(parts) != 3:\n            print(\"[Matrix] Invalid priority command format. Use 'priority <uuid> <level>'\")\n            return\n        target_uuid, level = parts[1], parts[2]\n        payload = {\n            \"type\": \"mediator_priority_update\",\n            \"agent_uuid\": target_uuid,\n            \"priority\": level,\n            \"source\": AGENT_NAME,\n            \"timestamp\": datetime.utcnow().isoformat()\n        }\n        print(f\"[Matrix] Updating priority for {target_uuid} to {level}\")\n        self.queue_message(payload)\n\n    def report_status(self):\n        status = {\n            \"type\": \"matrix_status\",\n            \"agent\": AGENT_NAME,\n            \"version\": VERSION,\n            \"revision\": REVISION,\n            \"uptime\": self.uptime(),\n            \"timestamp\": datetime.utcnow().isoformat()\n        }\n        print(f\"[Matrix] Reporting status: {status}\")\n        self.queue_message(status)\n\n    def report_agent_list(self):\n        report = {\n            \"type\": \"matrix_agent_list\",\n            \"agents\": list(self.agent_state.keys()),\n            \"timestamp\": datetime.utcnow().isoformat()\n        }\n        print(f\"[Matrix] Reporting agent list: {report}\")\n        self.queue_message(report)\n\n    def health_check_loop(self):\n        while self.running:\n            time.sleep(HEALTH_CHECK_INTERVAL)\n            report = {\n                \"type\": \"matrix_health_report\",\n                \"agent_count\": len(self.agent_state),\n                \"timestamp\": datetime.utcnow().isoformat()\n            }\n            print(f\"[Matrix] Health report: {report}\")\n            self.queue_message(report)\n\n    def backfill_agent_state(self):\n        if not self.redis_available:\n            print(\"[Matrix] Skipping backfill: Redis not available.\")\n            return\n        try:\n            agents = self.redis.hgetall(REDIS_KEY)\n            for uuid, meta in agents.items():\n                self.agent_state[uuid] = json.loads(meta)\n            print(f\"[Matrix] Backfilled {len(self.agent_state)} agents from Redis.\")\n        except Exception as e:\n            print(f\"[Matrix] Failed to backfill agent state: {e}\")\n\n    def queue_message(self, payload):\n        try:\n            with open(MESSAGE_QUEUE_PATH, \"a\") as f:\n                f.write(json.dumps(payload) + \"\\n\")\n        except Exception as e:\n            print(f\"[Matrix] Failed to queue message: {e}\")\n\n    def uptime(self):\n        return f\"{round(time.time() - self.start_time, 2)}s\"\n\nif __name__ == \"__main__\":\n    MatrixAgent()\n"
    }
  }
}